---
import "../styles/mdFileStyles.css";
const aboutme = await Astro.glob("../files/aboutme.md");
const experience = await Astro.glob("../files/experience.md");
const contactme = await Astro.glob("../files/contactme.md");

const aboutMeHtml = aboutme.map((file) => file.compiledContent());
const experienceHtml = experience.map((file) => file.compiledContent());
const contactMeHtml = contactme.map((file) => file.compiledContent());
---

<data id="about-file-output" data-html={aboutMeHtml}></data>
<data id="experience-file-output" data-html={experienceHtml}></data>
<data id="contact-file-output" data-html={contactMeHtml}></data>

<section id="main"></section>

<script>
  import { contentArray } from "../stores/globalStore";
  import { commandList } from "../constants/AvailableCommands";
  import { Files as AvailableFilesToList } from "../constants/AvailableFiles";

  window.onload = function () {
    const main = document.getElementById("main") as HTMLElement;
    RenderWelcomeComponent(main);
    contentArray.subscribe((command) => {
      if (command && command.length > 0) {
        // Clearing main because, if there are two help command in the list, it render two time with single help command;
        main.innerHTML = "";
        command.forEach((content) => {
          switch (content) {
            case "help":
              RenderHistoryCommandLine(main, content);
              RenderHelpCommandList(main);
              break;
            case "clear":
              RenderHistoryCommandLine(main, content);
              ClearContent(main);
              break;
            case "ls":
              RenderHistoryCommandLine(main, content);
              ListFile(main);
              break;
            case "cat aboutme":
              RenderHistoryCommandLine(main, content);
              CatAboutMe(main);
              break;
            case "cat experience":
              RenderHistoryCommandLine(main, content);
              CatExperience(main);
              break;
            case "cat contactme":
              RenderHistoryCommandLine(main, content);
              CatContactMe(main);
              break;
            default:
              RenderHistoryCommandLine(main, content);
              RenderInvalid(main, content);
          }
        });
      }
    });
  };

  function RenderHelpCommandList(main: HTMLElement) {
    const section = document.createElement("section");
    section.setAttribute(
      "class",
      "flex flex-col gap-4 py-4 px-2 my-6 w-fit border border-gray-500"
    );
    const article = document.createElement("article");
    article.setAttribute("class", "flex flex-col gap-2");
    section.append(article);
    const h1 = document.createElement("h1");
    h1.setAttribute("class", "text-xl");
    h1.textContent = "Available Commands:";
    const span = document.createElement("span");
    span.setAttribute("class", "text-sm text-gray-400");
    span.textContent = "All commands are case insentive";
    article.append(h1);
    article.append(span);
    main.append(section);

    const ul = document.createElement("ul");
    ul.setAttribute("class", "flex flex-col gap-1");

    commandList.forEach((command) => {
      const li = document.createElement("li");
      li.setAttribute("class", "text-secondaryText");

      const span = document.createElement("span");

      span.innerHTML = `${command.commandName} <span class="text-white"> => ${command.description}</span>`;

      li.appendChild(span);
      ul.appendChild(li);
    });
    section.append(ul);
  }

  function ClearContent(main: HTMLElement) {
    main.innerHTML = "";
    contentArray.set([]);
  }

  function RenderWelcomeComponent(main: HTMLElement) {
    const section = document.createElement("section");
    section.setAttribute("class", "py-4");

    const h1 = document.createElement("h1");
    h1.setAttribute("class", "text-5xl font-pixelifysans text-white");
    h1.textContent = "Welcome to the terminal experience";

    const span = document.createElement("span");
    span.setAttribute("class", "text-lg text-gray-400");
    span.innerHTML = `Type <span class="text-secondaryText">'help'</span> to list all the avaliable commands.`;

    section.append(h1, span);
    main.append(section);
  }

  function RenderInvalid(main: HTMLElement, command: string) {
    const span = document.createElement("span");
    span.setAttribute("class", "text-gray-500 block");
    if (command === "empty") {
      span.innerHTML = `Command cannot be empty, type <span class="text-secondaryText">'help'</span> to see all commands.`;
    } else {
      span.innerHTML = `Your Command <span class="text-red-500">'${command}'</span> is not found, type <span class="text-secondaryText">'help'</span> to see all commands.`;
    }
    main.append(span);
  }

  function ListFile(main: HTMLElement) {
    const wrapper = document.createElement("section");
    wrapper.setAttribute("class", "flex flex-col gap-1 py-2");

    const section = document.createElement("section");
    section.setAttribute("class", "flex flex-row gap-4");

    if (AvailableFilesToList && AvailableFilesToList.length > 0) {
      AvailableFilesToList.forEach((file) => {
        const span = document.createElement("span");
        span.textContent = file;
        span.setAttribute("class", "text-white");
        section.append(span);
      });
    } else {
      const span = document.createElement("span");
      span.textContent = "No Files Available";
      section.append(span);
    }

    const helperText = document.createElement("span");
    helperText.setAttribute("class", "text-gray-500");
    helperText.innerHTML = `Type <span class="text-secondaryText">'Cat Filename'</span> to view the file content`;

    if (AvailableFilesToList.length > 0) {
      wrapper.append(helperText, section);
    } else {
      wrapper.append(section);
    }
    main.append(wrapper);
  }

  function CatAboutMe(main: HTMLElement) {
    const section = document.createElement("section");
    section.setAttribute("class", "py-4");

    const htmlDataNode = document.getElementById("about-file-output")!;
    const data = htmlDataNode.getAttribute("data-html");
    section.innerHTML = data || "";

    main.append(section);
  }

  function CatExperience(main: HTMLElement) {
    const section = document.createElement("section");
    section.setAttribute("class", "py-4");

    const htmlDataNode = document.getElementById("experience-file-output")!;
    const data = htmlDataNode.getAttribute("data-html");
    section.innerHTML = data || "";

    main.append(section);
  }

  function CatContactMe(main: HTMLElement) {
    const section = document.createElement("section");
    section.setAttribute("class", "py-4");

    const htmlDataNode = document.getElementById("contact-file-output")!;
    const data = htmlDataNode.getAttribute("data-html");
    section.innerHTML = data || "";

    main.append(section);
  }

  function RenderHistoryCommandLine(main: HTMLElement, command: string) {
    const span = document.createElement("span");
    span.setAttribute("class", "text-primaryText flex flex-row gap-0");
    span.innerHTML = `guest@guest: <span class="text-secondaryText">~</span><span class="text-white">$ ${command}</span>`;

    main.append(span);
  }
</script>
